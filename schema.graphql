type Collection @entity {
  id: ID!
  collectionId: String! @index
  issuer: String! @index
  admin: String! @index
  owner: String! @index
  freezer: String
  metadataCid: String
  isDestroyed: Boolean!
  items: [Item] @derivedFrom(field: "collection")
}

type Item @entity {
  id: ID!
  itemId: String! @index
  collectionItemKey: String! @index
  collection: Collection!
  metadataCid: String
  isBurned: Boolean!
  owner: String
}

type BalanceTransfer @entity {
  id: ID!
  from: String!
  to: String!
  txHash: String @index
  amount: BigInt @index
  timestamp: Float @index
  blockNumber: BigInt
  success: Boolean
}

type AllocationEventData @jsonField {
  who: String
  amount: String
}

type AllocationEvent @jsonField {
  method: String
  section: String
  index: String
  data: AllocationEventData
}

type Allocations @entity {
  id: ID!
  txHash: String @index
  block: Int @index
  data: [AllocationEvent]
  success: Boolean
}

type UniquesTransfer @entity {
  id: ID!
  txHash: String @index
  block: Int @index
  from: String @index
  to: String @index
  collection: Collection!
  item: Item!
  fee: BigInt
  timestamp: Float @index
  success: Boolean
}
