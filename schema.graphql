type Account @entity {
  id: ID!
  balance: BigInt!
  vestingSchedule: [VestingData]
  transfers: [BalanceTransfer] @derivedFrom(field: "from")
}

type Collection @entity {
  id: ID!
  collectionId: String!
  metadataCid: String
  items: [Item] @derivedFrom(field: "collection")
}

type Item @entity {
  id: ID!
  itemId: String!
  collection: Collection!
  metadataCid: String
  owner: Account
}

type BalanceTransfer @entity {
  id: ID!
  from: Account!
  to: Account!
  txHash: String @index
  amount: BigInt @index
  timestamp: Float @index
  blockNumber: BigInt
  success: Boolean
}

type BalanceDeposit @entity {
  id: ID!
  from: String @index
  to: String @index
  txHash: String @index
  amount: BigInt @index
  timestamp: Float @index
  blockNumber: BigInt
  success: Boolean
}

type VestingData @jsonField {
  start: Int
  period: Int
  periodCount: Int
  perPeriod: BigInt
}

type VestingScheduleAdded @entity {
  id: ID!
  block: Int @index
  txHash: String @index
  signer: Account!
  to: Account!
  data: VestingData
}

type AllocationEventData @jsonField {
  who: String
  amount: String
}

type AllocationEvent @jsonField {
  method: String
  section: String
  index: String
  data: AllocationEventData
}

type Allocations @entity {
  id: ID!
  txHash: String @index
  block: Int @index
  data: [AllocationEvent]
  success: Boolean
}

type UniquesTransfer @entity {
  id: ID!
  txHash: String @index
  block: Int @index
  from: String @index
  to: String @index
  collection: Collection!
  item: Item!
  fee: BigInt!
  timestamp: Float @index
  success: Boolean
}
